#lang racket
(require
    cpsc411/compiler-lib
    cpsc411/langs/v2
    cpsc411/langs/v2-reg-alloc
    "../compiler.rkt"
    rackunit
    rackunit/text-ui)

(check-equal? (assign-call-undead-variables '(module
  ((new-frames ())
   (locals (tmp-ra.2))
   (call-undead ())
   (undead-out
    ((tmp-ra.2 rbp)
     (tmp-ra.2 rsi rbp)
     (tmp-ra.2 rsi rdi rbp)
     (rsi rdi r15 rbp)
     (rsi rdi r15 rbp)))
   (conflicts
    ((tmp-ra.2 (rdi rsi rbp))
     (rbp (r15 rdi rsi tmp-ra.2))
     (rsi (r15 rdi rbp tmp-ra.2))
     (rdi (r15 rbp rsi tmp-ra.2))
     (r15 (rbp rdi rsi)))))
  (define L.swap.1
    ((new-frames (()))
     (locals (z.3 tmp-ra.1 x.1 y.2))
     (undead-out
      ((rdi rsi tmp-ra.1 rbp)
       (rsi x.1 tmp-ra.1 rbp)
       (y.2 x.1 tmp-ra.1 rbp)
       ((y.2 x.1 tmp-ra.1 rbp)
        ((tmp-ra.1 rax rbp) (rax rbp))
        (((rax tmp-ra.1 rbp)
          ((y.2 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp)))
         (z.3 tmp-ra.1 rbp)
         (tmp-ra.1 rax rbp)
         (rax rbp)))))
     (call-undead (tmp-ra.1))
     (conflicts
      ((y.2 (rbp tmp-ra.1 x.1 rsi))
       (x.1 (y.2 rbp tmp-ra.1 rsi))
       (tmp-ra.1 (y.2 x.1 rbp rsi rdi rax z.3))
       (z.3 (rbp tmp-ra.1))
       (rsi (x.1 tmp-ra.1 r15 rdi rbp y.2))
       (rbp (y.2 x.1 tmp-ra.1 rax z.3 r15 rdi rsi))
       (rdi (tmp-ra.1 r15 rbp rsi))
       (r15 (rbp rdi rsi))
       (rax (rbp tmp-ra.1)))))
    (begin
      (set! tmp-ra.1 r15)
      (set! x.1 rdi)
      (set! y.2 rsi)
      (if (< y.2 x.1)
        (begin (set! rax x.1) (jump tmp-ra.1 rbp rax))
        (begin
          (return-point
           L.rp.1
           (begin
             (set! rsi x.1)
             (set! rdi y.2)
             (set! r15 L.rp.1)
             (jump L.swap.1 rbp r15 rdi rsi)))
          (set! z.3 rax)
          (set! rax z.3)
          (jump tmp-ra.1 rbp rax)))))
  (begin
    (set! tmp-ra.2 r15)
    (set! rsi 2)
    (set! rdi 1)
    (set! r15 tmp-ra.2)
    (jump L.swap.1 rbp r15 rdi rsi))))
      '(module
  ((new-frames ())
   (locals (tmp-ra.2))
   (call-undead ())
   (undead-out
    ((tmp-ra.2 rbp)
     (tmp-ra.2 rsi rbp)
     (tmp-ra.2 rsi rdi rbp)
     (rsi rdi r15 rbp)
     (rsi rdi r15 rbp)))
   (conflicts
    ((tmp-ra.2 (rdi rsi rbp))
     (rbp (r15 rdi rsi tmp-ra.2))
     (rsi (r15 rdi rbp tmp-ra.2))
     (rdi (r15 rbp rsi tmp-ra.2))
     (r15 (rbp rdi rsi))))
   (assignment ()))
  (define L.swap.1
    ((new-frames (()))
     (locals (y.2 x.1 z.3))
     (undead-out
      ((rdi rsi tmp-ra.1 rbp)
       (rsi x.1 tmp-ra.1 rbp)
       (y.2 x.1 tmp-ra.1 rbp)
       ((y.2 x.1 tmp-ra.1 rbp)
        ((tmp-ra.1 rax rbp) (rax rbp))
        (((rax tmp-ra.1 rbp)
          ((y.2 rsi rbp) (rsi rdi rbp) (rsi rdi r15 rbp) (rsi rdi r15 rbp)))
         (z.3 tmp-ra.1 rbp)
         (tmp-ra.1 rax rbp)
         (rax rbp)))))
     (call-undead (tmp-ra.1))
     (conflicts
      ((y.2 (rbp tmp-ra.1 x.1 rsi))
       (x.1 (y.2 rbp tmp-ra.1 rsi))
       (tmp-ra.1 (y.2 x.1 rbp rsi rdi rax z.3))
       (z.3 (rbp tmp-ra.1))
       (rsi (x.1 tmp-ra.1 r15 rdi rbp y.2))
       (rbp (y.2 x.1 tmp-ra.1 rax z.3 r15 rdi rsi))
       (rdi (tmp-ra.1 r15 rbp rsi))
       (r15 (rbp rdi rsi))
       (rax (rbp tmp-ra.1))))
     (assignment ((tmp-ra.1 fv0))))
    (begin
      (set! tmp-ra.1 r15)
      (set! x.1 rdi)
      (set! y.2 rsi)
      (if (< y.2 x.1)
        (begin (set! rax x.1) (jump tmp-ra.1 rbp rax))
        (begin
          (return-point
           L.rp.1
           (begin
             (set! rsi x.1)
             (set! rdi y.2)
             (set! r15 L.rp.1)
             (jump L.swap.1 rbp r15 rdi rsi)))
          (set! z.3 rax)
          (set! rax z.3)
          (jump tmp-ra.1 rbp rax)))))
  (begin
    (set! tmp-ra.2 r15)
    (set! rsi 2)
    (set! rdi 1)
    (set! r15 tmp-ra.2)
    (jump L.swap.1 rbp r15 rdi rsi))))

(check-equal? (assign-call-undead-variables '(module
  ((new-frames ())
   (locals (ra.12))
   (call-undead ())
   (undead-out ((ra.12 rbp) (ra.12 fv0 rbp) (fv0 r15 rbp) (fv0 r15 rbp)))
   (conflicts
    ((ra.12 (fv0 rbp))
     (rbp (r15 fv0 ra.12))
     (fv0 (r15 rbp ra.12))
     (r15 (rbp fv0)))))
  (define L.fact.4
    ((new-frames ((nfv.16)))
     (locals (ra.13 x.9 tmp.14 tmp.15 new-n.10 nfv.16 factn-1.11 tmp.17))
     (undead-out
      ((r15 x.9 rbp)
       (x.9 ra.13 rbp)
       ((x.9 ra.13 rbp)
        ((ra.13 rax rbp) (rax rbp))
        ((tmp.14 x.9 ra.13 rbp)
         (tmp.14 tmp.15 x.9 ra.13 rbp)
         (tmp.15 x.9 ra.13 rbp)
         (new-n.10 x.9 ra.13 rbp)
         ((rax x.9 ra.13 rbp) ((nfv.16 rbp) (nfv.16 r15 rbp) (nfv.16 r15 rbp)))
         (x.9 factn-1.11 ra.13 rbp)
         (factn-1.11 tmp.17 ra.13 rbp)
         (tmp.17 ra.13 rbp)
         (ra.13 rax rbp)
         (rax rbp)))))
     (call-undead (x.9 ra.13))
     (conflicts
      ((tmp.17 (rbp ra.13 factn-1.11))
       (factn-1.11 (tmp.17 rbp ra.13 x.9))
       (nfv.16 (r15 rbp))
       (new-n.10 (rbp ra.13 x.9))
       (tmp.15 (x.9 rbp ra.13 tmp.14))
       (tmp.14 (tmp.15 rbp ra.13 x.9))
       (x.9 (ra.13 rbp r15 factn-1.11 new-n.10 tmp.15 tmp.14))
       (ra.13 (rbp x.9 rax tmp.17 factn-1.11 new-n.10 tmp.15 tmp.14))
       (rbp
        (ra.13 x.9 rax tmp.17 factn-1.11 r15 nfv.16 new-n.10 tmp.15 tmp.14))
       (r15 (x.9 rbp nfv.16))
       (rax (rbp ra.13)))))
    (begin
      (set! x.9 fv0)
      (set! ra.13 r15)
      (if (= x.9 0)
        (begin (set! rax 1) (jump ra.13 rbp rax))
        (begin
          (set! tmp.14 -1)
          (set! tmp.15 x.9)
          (set! tmp.15 (+ tmp.15 tmp.14))
          (set! new-n.10 tmp.15)
          (return-point
           L.rp.6
           (begin
             (set! nfv.16 new-n.10)
             (set! r15 L.rp.6)
             (jump L.fact.4 rbp r15 nfv.16)))
          (set! factn-1.11 rax)
          (set! tmp.17 x.9)
          (set! tmp.17 (* tmp.17 factn-1.11))
          (set! rax tmp.17)
          (jump ra.13 rbp rax)))))
  (begin
    (set! ra.12 r15)
    (set! fv0 5)
    (set! r15 ra.12)
    (jump L.fact.4 rbp r15 fv0))))
         '(module
  ((new-frames ())
   (locals (ra.12))
   (call-undead ())
   (undead-out ((ra.12 rbp) (ra.12 fv0 rbp) (fv0 r15 rbp) (fv0 r15 rbp)))
   (conflicts
    ((ra.12 (fv0 rbp))
     (rbp (r15 fv0 ra.12))
     (fv0 (r15 rbp ra.12))
     (r15 (rbp fv0))))
   (assignment ()))
  (define L.fact.4
    ((new-frames ((nfv.16)))
     (locals (tmp.17 factn-1.11 nfv.16 new-n.10 tmp.15 tmp.14))
     (undead-out
      ((r15 x.9 rbp)
       (x.9 ra.13 rbp)
       ((x.9 ra.13 rbp)
        ((ra.13 rax rbp) (rax rbp))
        ((tmp.14 x.9 ra.13 rbp)
         (tmp.14 tmp.15 x.9 ra.13 rbp)
         (tmp.15 x.9 ra.13 rbp)
         (new-n.10 x.9 ra.13 rbp)
         ((rax x.9 ra.13 rbp) ((nfv.16 rbp) (nfv.16 r15 rbp) (nfv.16 r15 rbp)))
         (x.9 factn-1.11 ra.13 rbp)
         (factn-1.11 tmp.17 ra.13 rbp)
         (tmp.17 ra.13 rbp)
         (ra.13 rax rbp)
         (rax rbp)))))
     (call-undead (x.9 ra.13))
     (conflicts
      ((tmp.17 (rbp ra.13 factn-1.11))
       (factn-1.11 (tmp.17 rbp ra.13 x.9))
       (nfv.16 (r15 rbp))
       (new-n.10 (rbp ra.13 x.9))
       (tmp.15 (x.9 rbp ra.13 tmp.14))
       (tmp.14 (tmp.15 rbp ra.13 x.9))
       (x.9 (ra.13 rbp r15 factn-1.11 new-n.10 tmp.15 tmp.14))
       (ra.13 (rbp x.9 rax tmp.17 factn-1.11 new-n.10 tmp.15 tmp.14))
       (rbp
        (ra.13 x.9 rax tmp.17 factn-1.11 r15 nfv.16 new-n.10 tmp.15 tmp.14))
       (r15 (x.9 rbp nfv.16))
       (rax (rbp ra.13))))
     (assignment ((ra.13 fv0) (x.9 fv1))))
    (begin
      (set! x.9 fv0)
      (set! ra.13 r15)
      (if (= x.9 0)
        (begin (set! rax 1) (jump ra.13 rbp rax))
        (begin
          (set! tmp.14 -1)
          (set! tmp.15 x.9)
          (set! tmp.15 (+ tmp.15 tmp.14))
          (set! new-n.10 tmp.15)
          (return-point
           L.rp.6
           (begin
             (set! nfv.16 new-n.10)
             (set! r15 L.rp.6)
             (jump L.fact.4 rbp r15 nfv.16)))
          (set! factn-1.11 rax)
          (set! tmp.17 x.9)
          (set! tmp.17 (* tmp.17 factn-1.11))
          (set! rax tmp.17)
          (jump ra.13 rbp rax)))))
  (begin
    (set! ra.12 r15)
    (set! fv0 5)
    (set! r15 ra.12)
    (jump L.fact.4 rbp r15 fv0))))

(check-equal? (assign-call-undead-variables '(module
  ((new-frames ())
   (locals (tmp-ra.10))
   (call-undead ())
   (undead-out
    ((tmp-ra.10 rbp)
     (tmp-ra.10 fv1 rbp)
     (tmp-ra.10 fv1 fv0 rbp)
     (fv1 fv0 r15 rbp)
     (fv1 fv0 r15 rbp)))
   (conflicts
    ((tmp-ra.10 (fv0 fv1 rbp))
     (rbp (r15 fv0 fv1 tmp-ra.10))
     (fv1 (r15 fv0 rbp tmp-ra.10))
     (fv0 (r15 rbp fv1 tmp-ra.10))
     (r15 (rbp fv0 fv1)))))
  (define L.swap.1
    ((new-frames ((nfv.8 nfv.9)))
     (locals (y.2 x.1 z.3 nfv.9 nfv.8))
     (undead-out
      ((fv0 fv1 tmp-ra.7 rbp)
       (fv1 x.1 tmp-ra.7 rbp)
       (y.2 x.1 tmp-ra.7 rbp)
       ((y.2 x.1 tmp-ra.7 rbp)
        ((tmp-ra.7 rax rbp) (rax rbp))
        (((rax tmp-ra.7 rbp)
          ((y.2 nfv.9 rbp)
           (nfv.9 nfv.8 rbp)
           (nfv.9 nfv.8 r15 rbp)
           (nfv.9 nfv.8 r15 rbp)))
         (z.3 tmp-ra.7 rbp)
         (tmp-ra.7 rax rbp)
         (rax rbp)))))
     (call-undead (tmp-ra.7))
     (conflicts
      ((y.2 (rbp tmp-ra.7 x.1 nfv.9))
       (x.1 (y.2 rbp tmp-ra.7 fv1))
       (tmp-ra.7 (y.2 x.1 rbp fv1 fv0 rax z.3))
       (z.3 (rbp tmp-ra.7))
       (nfv.9 (r15 nfv.8 rbp y.2))
       (nfv.8 (r15 rbp nfv.9))
       (rbp (y.2 x.1 tmp-ra.7 rax z.3 r15 nfv.8 nfv.9))
       (r15 (rbp nfv.8 nfv.9))
       (rax (rbp tmp-ra.7))
       (fv0 (tmp-ra.7))
       (fv1 (x.1 tmp-ra.7)))))
    (begin
      (set! tmp-ra.7 r15)
      (set! x.1 fv0)
      (set! y.2 fv1)
      (if (< y.2 x.1)
        (begin (set! rax x.1) (jump tmp-ra.7 rbp rax))
        (begin
          (return-point L.rp.3
            (begin
              (set! nfv.9 x.1)
              (set! nfv.8 y.2)
              (set! r15 L.rp.3)
              (jump L.swap.1 rbp r15 nfv.8 nfv.9)))
          (set! z.3 rax)
          (set! rax z.3)
          (jump tmp-ra.7 rbp rax)))))
  (begin
    (set! tmp-ra.10 r15)
    (set! fv1 2)
    (set! fv0 1)
    (set! r15 tmp-ra.10)
    (jump L.swap.1 rbp r15 fv0 fv1))))
              '(module
  ((new-frames ())
   (locals (tmp-ra.10))
   (call-undead ())
   (undead-out
    ((tmp-ra.10 rbp)
     (tmp-ra.10 fv1 rbp)
     (tmp-ra.10 fv1 fv0 rbp)
     (fv1 fv0 r15 rbp)
     (fv1 fv0 r15 rbp)))
   (conflicts
    ((tmp-ra.10 (fv0 fv1 rbp))
     (rbp (r15 fv0 fv1 tmp-ra.10))
     (fv1 (r15 fv0 rbp tmp-ra.10))
     (fv0 (r15 rbp fv1 tmp-ra.10))
     (r15 (rbp fv0 fv1))))
   (assignment ()))
  (define L.swap.1
    ((new-frames ((nfv.8 nfv.9)))
     (locals (nfv.8 nfv.9 z.3 x.1 y.2))
     (undead-out
      ((fv0 fv1 tmp-ra.7 rbp)
       (fv1 x.1 tmp-ra.7 rbp)
       (y.2 x.1 tmp-ra.7 rbp)
       ((y.2 x.1 tmp-ra.7 rbp)
        ((tmp-ra.7 rax rbp) (rax rbp))
        (((rax tmp-ra.7 rbp)
          ((y.2 nfv.9 rbp)
           (nfv.9 nfv.8 rbp)
           (nfv.9 nfv.8 r15 rbp)
           (nfv.9 nfv.8 r15 rbp)))
         (z.3 tmp-ra.7 rbp)
         (tmp-ra.7 rax rbp)
         (rax rbp)))))
     (call-undead (tmp-ra.7))
     (conflicts
      ((y.2 (rbp tmp-ra.7 x.1 nfv.9))
       (x.1 (y.2 rbp tmp-ra.7 fv1))
       (tmp-ra.7 (y.2 x.1 rbp fv1 fv0 rax z.3))
       (z.3 (rbp tmp-ra.7))
       (nfv.9 (r15 nfv.8 rbp y.2))
       (nfv.8 (r15 rbp nfv.9))
       (rbp (y.2 x.1 tmp-ra.7 rax z.3 r15 nfv.8 nfv.9))
       (r15 (rbp nfv.8 nfv.9))
       (rax (rbp tmp-ra.7))
       (fv0 (tmp-ra.7))
       (fv1 (x.1 tmp-ra.7))))
     (assignment ((tmp-ra.7 fv2))))
    (begin
      (set! tmp-ra.7 r15)
      (set! x.1 fv0)
      (set! y.2 fv1)
      (if (< y.2 x.1)
        (begin (set! rax x.1) (jump tmp-ra.7 rbp rax))
        (begin
          (return-point
           L.rp.3
           (begin
             (set! nfv.9 x.1)
             (set! nfv.8 y.2)
             (set! r15 L.rp.3)
             (jump L.swap.1 rbp r15 nfv.8 nfv.9)))
          (set! z.3 rax)
          (set! rax z.3)
          (jump tmp-ra.7 rbp rax)))))
  (begin
    (set! tmp-ra.10 r15)
    (set! fv1 2)
    (set! fv0 1)
    (set! r15 tmp-ra.10)
    (jump L.swap.1 rbp r15 fv0 fv1))))