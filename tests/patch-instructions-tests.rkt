#lang racket
(require
    cpsc411/compiler-lib
    cpsc411/langs/v2
    cpsc411/langs/v2-reg-alloc
    "../compiler.rkt"
    rackunit
    rackunit/text-ui)

(check-equal? (patch-instructions '(begin
  (with-label L.__main.1 (set! r15 r15))
  (set! rsi 16)
  (set! rdi 8)
  (set! r15 r15)
  (jump L.+.1)
  (with-label L.+.1 (set! r15 r15))
  (set! r14 rdi)
  (set! r13 rsi)
  (set! r13 r13)
  (set! r13 (bitwise-and r13 7))
  (compare r13 0)
  (jump-if = L.tmp.9)
  (jump L.tmp.10)
  (with-label L.tmp.9 (set! r13 14))
  (jump L.tmp.11)
  (with-label L.tmp.10 (set! r13 6))
  (jump L.tmp.11)
  (with-label L.tmp.11 (compare r13 6))
  (jump-if != L.__nested.2)
  (jump L.__nested.3)
  (with-label L.tmp.6 (set! r14 14))
  (jump L.tmp.8)
  (with-label L.tmp.7 (set! r14 6))
  (jump L.tmp.8)
  (with-label L.tmp.8 (compare r14 6))
  (jump-if != L.__nested.4)
  (jump L.__nested.5)
  (with-label L.__nested.4 (set! rax r14))
  (set! rax (+ rax r13))
  (jump r15)
  (with-label L.__nested.5 (set! rax 574))
  (jump r15)
  (with-label L.__nested.2 (set! r13 r14))
  (set! r13 (bitwise-and r13 7))
  (compare r13 0)
  (jump-if = L.tmp.6)
  (jump L.tmp.7)
  (with-label L.__nested.3 (set! rax 574))
  (jump r15)))
      '(begin
  (with-label L.__main.1 (set! r15 r15))
  (set! rsi 16)
  (set! rdi 8)
  (set! r15 r15)
  (jump L.+.1)
  (with-label L.+.1 (set! r15 r15))
  (set! r14 rdi)
  (set! r13 rsi)
  (set! r13 r13)
  (set! r13 (bitwise-and r13 7))
  (compare r13 0)
  (jump-if = L.tmp.9)
  (jump L.tmp.10)
  (with-label L.tmp.9 (set! r13 14))
  (jump L.tmp.11)
  (with-label L.tmp.10 (set! r13 6))
  (jump L.tmp.11)
  (with-label L.tmp.11 (compare r13 6))
  (jump-if != L.__nested.2)
  (jump L.__nested.3)
  (with-label L.tmp.6 (set! r14 14))
  (jump L.tmp.8)
  (with-label L.tmp.7 (set! r14 6))
  (jump L.tmp.8)
  (with-label L.tmp.8 (compare r14 6))
  (jump-if != L.__nested.4)
  (jump L.__nested.5)
  (with-label L.__nested.4 (set! rax r14))
  (set! rax (+ rax r13))
  (jump r15)
  (with-label L.__nested.5 (set! rax 574))
  (jump r15)
  (with-label L.__nested.2 (set! r13 r14))
  (set! r13 (bitwise-and r13 7))
  (compare r13 0)
  (jump-if = L.tmp.6)
  (jump L.tmp.7)
  (with-label L.__nested.3 (set! rax 574))
  (jump r15)))

(check-equal? (patch-instructions '(begin
  (with-label L.__main.1 (set! r15 r15))
  (set! rsi 16)
  (set! rdi 8)
  (set! r15 r15)
  (jump L.+.1)
  (with-label L.+.1 (set! r15 r15))
  (set! r14 rdi)
  (set! r13 rsi)
  (set! r13 r13)
  (set! r13 (bitwise-ior r13 7))
  (compare r13 0)
  (jump-if = L.tmp.9)
  (jump L.tmp.10)
  (with-label L.tmp.9 (set! r13 14))
  (jump L.tmp.11)
  (with-label L.tmp.10 (set! r13 6))
  (jump L.tmp.11)
  (with-label L.tmp.11 (compare r13 6))
  (jump-if != L.__nested.2)
  (jump L.__nested.3)
  (with-label L.tmp.6 (set! r14 14))
  (jump L.tmp.8)
  (with-label L.tmp.7 (set! r14 6))
  (jump L.tmp.8)
  (with-label L.tmp.8 (compare r14 6))
  (jump-if != L.__nested.4)
  (jump L.__nested.5)
  (with-label L.__nested.4 (set! rax r14))
  (set! rax (+ rax r13))
  (jump r15)
  (with-label L.__nested.5 (set! rax 574))
  (jump r15)
  (with-label L.__nested.2 (set! r13 r14))
  (set! r13 (bitwise-xor r13 7))
  (compare r13 0)
  (jump-if = L.tmp.6)
  (jump L.tmp.7)
  (with-label L.__nested.3 (set! rax 574))
  (jump r15)))
            '(begin
  (with-label L.__main.1 (set! r15 r15))
  (set! rsi 16)
  (set! rdi 8)
  (set! r15 r15)
  (jump L.+.1)
  (with-label L.+.1 (set! r15 r15))
  (set! r14 rdi)
  (set! r13 rsi)
  (set! r13 r13)
  (set! r13 (bitwise-ior r13 7))
  (compare r13 0)
  (jump-if = L.tmp.9)
  (jump L.tmp.10)
  (with-label L.tmp.9 (set! r13 14))
  (jump L.tmp.11)
  (with-label L.tmp.10 (set! r13 6))
  (jump L.tmp.11)
  (with-label L.tmp.11 (compare r13 6))
  (jump-if != L.__nested.2)
  (jump L.__nested.3)
  (with-label L.tmp.6 (set! r14 14))
  (jump L.tmp.8)
  (with-label L.tmp.7 (set! r14 6))
  (jump L.tmp.8)
  (with-label L.tmp.8 (compare r14 6))
  (jump-if != L.__nested.4)
  (jump L.__nested.5)
  (with-label L.__nested.4 (set! rax r14))
  (set! rax (+ rax r13))
  (jump r15)
  (with-label L.__nested.5 (set! rax 574))
  (jump r15)
  (with-label L.__nested.2 (set! r13 r14))
  (set! r13 (bitwise-xor r13 7))
  (compare r13 0)
  (jump-if = L.tmp.6)
  (jump L.tmp.7)
  (with-label L.__nested.3 (set! rax 574))
  (jump r15)))

(check-equal? (patch-instructions '(begin
  (with-label L.__main.1 (set! r15 r15))
  (set! rsi 16)
  (set! rdi 8)
  (set! r15 r15)
  (jump L.+.1)
  (with-label L.+.1 (set! r15 r15))
  (set! r14 rdi)
  (set! r13 rsi)
  (set! r13 r13)
  (set! r13 (arithmetic-shift-right r13 7))
  (compare r13 0)
  (jump-if = L.tmp.9)
  (jump L.tmp.10)
  (with-label L.tmp.9 (set! r13 14))
  (jump L.tmp.11)
  (with-label L.tmp.10 (set! r13 6))
  (jump L.tmp.11)
  (with-label L.tmp.11 (compare r13 6))
  (jump-if != L.__nested.2)
  (jump L.__nested.3)
  (with-label L.tmp.6 (set! r14 14))
  (jump L.tmp.8)
  (with-label L.tmp.7 (set! r14 6))
  (jump L.tmp.8)
  (with-label L.tmp.8 (compare r14 6))
  (jump-if != L.__nested.4)
  (jump L.__nested.5)
  (with-label L.__nested.4 (set! rax r14))
  (set! rax (+ rax r13))
  (jump r15)
  (with-label L.__nested.5 (set! rax 574))
  (jump r15)
  (with-label L.__nested.2 (set! r13 r14))
  (set! r13 (bitwise-xor r13 7))
  (compare r13 0)
  (jump-if = L.tmp.6)
  (jump L.tmp.7)
  (with-label L.__nested.3 (set! rax 574))
  (jump r15)))
          '(begin
  (with-label L.__main.1 (set! r15 r15))
  (set! rsi 16)
  (set! rdi 8)
  (set! r15 r15)
  (jump L.+.1)
  (with-label L.+.1 (set! r15 r15))
  (set! r14 rdi)
  (set! r13 rsi)
  (set! r13 r13)
  (set! r13 (arithmetic-shift-right r13 7))
  (compare r13 0)
  (jump-if = L.tmp.9)
  (jump L.tmp.10)
  (with-label L.tmp.9 (set! r13 14))
  (jump L.tmp.11)
  (with-label L.tmp.10 (set! r13 6))
  (jump L.tmp.11)
  (with-label L.tmp.11 (compare r13 6))
  (jump-if != L.__nested.2)
  (jump L.__nested.3)
  (with-label L.tmp.6 (set! r14 14))
  (jump L.tmp.8)
  (with-label L.tmp.7 (set! r14 6))
  (jump L.tmp.8)
  (with-label L.tmp.8 (compare r14 6))
  (jump-if != L.__nested.4)
  (jump L.__nested.5)
  (with-label L.__nested.4 (set! rax r14))
  (set! rax (+ rax r13))
  (jump r15)
  (with-label L.__nested.5 (set! rax 574))
  (jump r15)
  (with-label L.__nested.2 (set! r13 r14))
  (set! r13 (bitwise-xor r13 7))
  (compare r13 0)
  (jump-if = L.tmp.6)
  (jump L.tmp.7)
  (with-label L.__nested.3 (set! rax 574))
  (jump r15)))    